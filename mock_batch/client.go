// Code generated by MockGen. DO NOT EDIT.
// Source: batch/client.go

package mock_batch

import (
	gomock "github.com/golang/mock/gomock"
)

// MockBatchUserRoleClient is a mock of BatchUserRoleClient interface
type MockBatchUserRoleClient struct {
	ctrl     *gomock.Controller
	recorder *MockBatchUserRoleClientMockRecorder
}

// MockBatchUserRoleClientMockRecorder is the mock recorder for MockBatchUserRoleClient
type MockBatchUserRoleClientMockRecorder struct {
	mock *MockBatchUserRoleClient
}

// NewMockBatchUserRoleClient creates a new mock instance
func NewMockBatchUserRoleClient(ctrl *gomock.Controller) *MockBatchUserRoleClient {
	mock := &MockBatchUserRoleClient{ctrl: ctrl}
	mock.recorder = &MockBatchUserRoleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockBatchUserRoleClient) EXPECT() *MockBatchUserRoleClientMockRecorder {
	return _m.recorder
}

// ListUsers mocks base method
func (_m *MockBatchUserRoleClient) ListUsers() (*[]string, error) {
	ret := _m.ctrl.Call(_m, "ListUsers")
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers
func (_mr *MockBatchUserRoleClientMockRecorder) ListUsers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUsers")
}

// ListRolesForUser mocks base method
func (_m *MockBatchUserRoleClient) ListRolesForUser(name string) (*[]string, error) {
	ret := _m.ctrl.Call(_m, "ListRolesForUser", name)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolesForUser indicates an expected call of ListRolesForUser
func (_mr *MockBatchUserRoleClientMockRecorder) ListRolesForUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRolesForUser", arg0)
}

// ListAllRoles mocks base method
func (_m *MockBatchUserRoleClient) ListAllRoles() (*[]string, error) {
	ret := _m.ctrl.Call(_m, "ListAllRoles")
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRoles indicates an expected call of ListAllRoles
func (_mr *MockBatchUserRoleClientMockRecorder) ListAllRoles() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAllRoles")
}

// UpdatePassword mocks base method
func (_m *MockBatchUserRoleClient) UpdatePassword(name string, password string) error {
	ret := _m.ctrl.Call(_m, "UpdatePassword", name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (_mr *MockBatchUserRoleClientMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePassword", arg0, arg1)
}

// CreateUser mocks base method
func (_m *MockBatchUserRoleClient) CreateUser(name string, password string) error {
	ret := _m.ctrl.Call(_m, "CreateUser", name, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (_mr *MockBatchUserRoleClientMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUser", arg0, arg1)
}

// CreateRole mocks base method
func (_m *MockBatchUserRoleClient) CreateRole(name string) error {
	ret := _m.ctrl.Call(_m, "CreateRole", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole
func (_mr *MockBatchUserRoleClientMockRecorder) CreateRole(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRole", arg0)
}

// AssignRolesToUser mocks base method
func (_m *MockBatchUserRoleClient) AssignRolesToUser(name string, roles ...string) error {
	_s := []interface{}{name}
	for _, _x := range roles {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AssignRolesToUser", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRolesToUser indicates an expected call of AssignRolesToUser
func (_mr *MockBatchUserRoleClientMockRecorder) AssignRolesToUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssignRolesToUser", _s...)
}

// RemoveRolesFromUser mocks base method
func (_m *MockBatchUserRoleClient) RemoveRolesFromUser(name string, roles ...string) error {
	_s := []interface{}{name}
	for _, _x := range roles {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RemoveRolesFromUser", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRolesFromUser indicates an expected call of RemoveRolesFromUser
func (_mr *MockBatchUserRoleClientMockRecorder) RemoveRolesFromUser(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveRolesFromUser", _s...)
}

// DeleteUsers mocks base method
func (_m *MockBatchUserRoleClient) DeleteUsers(name ...string) error {
	_s := []interface{}{}
	for _, _x := range name {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteUsers", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers
func (_mr *MockBatchUserRoleClientMockRecorder) DeleteUsers(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUsers", arg0...)
}

// DeleteFiles mocks base method
func (_m *MockBatchUserRoleClient) DeleteFiles(file ...string) error {
	_s := []interface{}{}
	for _, _x := range file {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteFiles", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFiles indicates an expected call of DeleteFiles
func (_mr *MockBatchUserRoleClientMockRecorder) DeleteFiles(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFiles", arg0...)
}
