// Code generated by MockGen. DO NOT EDIT.
// Source: client/logger.go

package mock_client

import (
	gomock "github.com/golang/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return _m.recorder
}

// Debug mocks base method
func (_m *MockLogger) Debug(msg string, fields ...zapcore.Field) {
	_s := []interface{}{msg}
	for _, _x := range fields {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Debug", _s...)
}

// Debug indicates an expected call of Debug
func (_mr *MockLoggerMockRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Debug", _s...)
}

// Warn mocks base method
func (_m *MockLogger) Warn(msg string, fields ...zapcore.Field) {
	_s := []interface{}{msg}
	for _, _x := range fields {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Warn", _s...)
}

// Warn indicates an expected call of Warn
func (_mr *MockLoggerMockRecorder) Warn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Warn", _s...)
}

// Error mocks base method
func (_m *MockLogger) Error(msg string, fields ...zapcore.Field) error {
	_s := []interface{}{msg}
	for _, _x := range fields {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Error", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (_mr *MockLoggerMockRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Error", _s...)
}
